type Query {
   getUsers(input: PaginationInput): UserConnection!
   getUser(id: ID!): User!
   self: User!
}

type UserConnection {
   totalCount: Int!
   pageInfo: PageInfo!
   edges: [UserEdge!]!
}

type UserEdge {
   node: User!
   cursor: Cursor!
}

type User {
   id: ID!
   name: String!
   joinedAt: Date!
   email: String!
   image: String
   emailVerified: Boolean!
   seeded: Boolean
   settings: Settings!
   accounts: [Account!]!
}

type Account {
   id: ID!
   provider: String!
   type: String
   providerAccountId: String!
   access_token: String!
   expires_at: String!
   refresh_token: String
   refresh_token_expires_in: Int
   token_type: String
   id_token: String
   scope: String
   userId: String
   name: String
   email: String
}

type Settings {
   visibility: VisiblitySettings!
}

type VisiblitySettings {
   profile: Boolean
   progress: Boolean
   favourites: Boolean
   ratings: Boolean
}
